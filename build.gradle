buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.dipien:semantic-version-gradle-plugin:2.0.0"
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id 'java-library'

    // https://docs.gradle.org/current/userguide/distribution_plugin.html
    id 'distribution'

    // https://docs.gradle.org/current/userguide/idea_plugin.html
    id 'idea'

    // Used to build java class source code from avro schemas
    id "com.github.davidmc24.gradle.plugin.avro" version "1.5.0"
}

group 'org.geovistory'

version = "0.9.0"
apply plugin: "com.dipien.semantic-version"


repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

distributions {
    main {
        contents {
            from jar
            from configurations.runtimeClasspath
            into('src/main/resources/') {
                from { 'src/main/resources/' }
            }
        }
    }
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'org.apache.kafka:kafka-clients:3.4.0'
    implementation 'org.apache.kafka:connect-api:3.4.0'
    implementation 'org.apache.kafka:connect-json:3.4.0'
    implementation 'org.apache.jena:jena-arq:4.7.0'
    implementation 'org.apache.jena:jena-core:4.7.0'
    implementation 'org.apache.jena:jena-shaded-guava:4.7.0'

    // For gradle-avro-plugin
    implementation "org.apache.avro:avro:1.11.0"

    // To convert avro records from kafka to java data
    implementation 'io.confluent:kafka-connect-avro-converter:7.0.1'


    // https://mvnrepository.com/artifact/org.json/json
    implementation 'org.json:json:20230227'

    // logging
    implementation 'org.slf4j:slf4j-simple:2.0.5'

    //testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'


    // Use assertj for testing.
    testImplementation 'org.assertj:assertj-core:3.24.2'

    testImplementation "org.mockito:mockito-core:5.2.0"
    testImplementation "org.mockito:mockito-junit-jupiter:5.2.0"

    // Use underscore for testing.
    testImplementation 'com.github.javadev:underscore:1.87'

    // to test converters
    testImplementation 'io.confluent:kafka-connect-avro-data:7.0.1'

    // To test integration with Fuseki
    testImplementation "org.testcontainers:testcontainers:1.18.3"
    testImplementation "org.testcontainers:junit-jupiter:1.18.3"


    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    compileOnly "com.google.code.findbugs:annotations:3.0.1"

    integrationTestRuntimeOnly "io.confluent:kafka-avro-serializer:7.4.0"
    integrationTestRuntimeOnly "io.confluent:kafka-connect-avro-converter:7.4.0"
    integrationTestRuntimeOnly "io.confluent:kafka-json-serializer:7.4.0"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter:5.9.2"
    integrationTestRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.20.0"

    integrationTestImplementation "org.apache.kafka:connect-runtime:3.4.0"
    integrationTestImplementation "com.fasterxml.jackson.core:jackson-annotations:2.15.2"
    integrationTestImplementation "javax.servlet:javax.servlet-api:4.0.1"
    integrationTestImplementation "org.apache.avro:avro:1.11.1"
    integrationTestImplementation "org.eclipse.jetty:jetty-http:9.4.39.v20210325"
    integrationTestImplementation "org.eclipse.jetty:jetty-server:9.4.39.v20210325"
    integrationTestImplementation "org.eclipse.jetty:jetty-util:9.4.39.v20210325"
    integrationTestImplementation 'org.eclipse.jetty:jetty-client:9.4.39.v20210325'
    integrationTestImplementation "junit:junit:4.13.2" // This is for testcontainers
    integrationTestImplementation "org.testcontainers:junit-jupiter:1.18.3"
    integrationTestImplementation "org.testcontainers:kafka:1.18.3" // this is not Kafka version
    integrationTestImplementation "org.testcontainers:testcontainers:1.18.3"
    integrationTestImplementation "org.awaitility:awaitility:4.2.0"

    // Make test utils from 'test' available in 'integration-test'
    integrationTestImplementation sourceSets.test.output
}

processResources {
    filesMatching('rdf-kafka-sink-connector-version.properties') {
        expand([version: version])
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    // dependsOn test, distTar
    dependsOn distTar

    useJUnitPlatform()

    // Run always.
    outputs.upToDateWhen { false }

    // Pass the distribution file path to the tests.
    systemProperty("integration-test.distribution.file.path", distTar.archiveFile.get().asFile.path)
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.findProperty("maven.user") ?: System.getenv("MAVEN_USERNAME")
                password = project.findProperty("maven.password") ?: System.getenv("MAVEN_PASSWORD")
            }
        }
        /*maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/geovistory/rdf-kafka-sink-connector")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }*/
    }
    publications {
        maven(MavenPublication) {
            groupId = 'org.geovistory'
            artifactId = 'rdf-kafka-sink-connector'
            from components.java
        }
    }
}

task printVersionName {
    println 'v' + project.version
}
